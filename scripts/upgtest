###########################################################################################
# File name: upgtest
# ARG1:
#	- filename	- upgrade applications jffs2 file system
###########################################################################################

set UPGRADE_BACKUP_PARAMS 	0						# Indicator for the case some files on TFS should be backed up, and, as result, TFS sectors (only) should be updated twice
set UPGRADE_FLASHBANK		$FLASH_BANK_ID_UMON		# Flash Bank (default for uMON & apps)

# arg_apps:
set UPGRADE_NAME			$ARG1
set UPGRADE_START_SEC		$APPS_BANK0_ADDR
set UPGRADE_FILE_RANGE_0	0
set UPGRADE_FILE_RANGE_2	$APPS_BANK0_SIZE_NSECT
goto tftp_jffs2_apps


# tftp_jffs2_apps:
tftp $TFTP_SERVER_ADDR get $UPGRADE_NAME $JFFS2BASE
if $TFTPGET seq \$TFTPGET goto no_file_jffs2
gosub TftpBytes2Sectors
set UPGRADE_FILE_RANGE_1  $TFTPGET_NSEC
set UPGRADE_ADDR $JFFS2BASE
gosub UpgradeUmon
goto done_jffs2
# no_file_jffs2:
echo File $UPGRADE_NAME is not found on $TFTP_SERVER_ADDR
# done_jffs2:
set UPGRADE_ARG cleanup
exit




##########################################################################
# Subroutine: UpgradeUmon
# Burn uMon image into the flash. The image should be loaded into $UPGRADE_ADDR
# Arguments:
#   UPGRADE_NAME - for echo only
#	UPGRADE_START_SEC - Start sector # to burn
#	UPGRADE_ADDR - memory addr of loaded image 
#   UPGRADE_FILE_RANGE_0..UPGRADE_FILE_RANGE_2 range to erase only
#   UPGRADE_FILE_RANGE_0..UPGRADE_FILE_RANGE_1 range to erase & burn (UPGRADE_FILE_RANGE_2 >= UPGRADE_FILE_RANGE_1)
# Notes:
#	- We are using "spif" API for the Flash access (the "flash" API uasage is under comment, meanwhile).
#	- First 64K from MEM_CB_RX is used for validation purpose
# UpgradeUmon:

#flash bank $UPGRADE_FLASHBANK
spif_device $UPGRADE_FLASHBANK

echo Programming $UPGRADE_NAME \c

set isec		0
set iaddr_dst	0
set iaddr_src	$UPGRADE_ADDR

# 1st loop: calc iaddr_dst = $UPGRADE_START_SEC * $FLASH_SECSIZE
# LOOP0:
if $isec ge $UPGRADE_START_SEC goto LOOP0_DONE
set -i isec
set -i -x iaddr_dst $FLASH_SECSIZE
goto LOOP0
# LOOP0_DONE:

set isec 0
# 2nd loop: erase/write sectors
# WRITE_LOOP:
if $isec ge $UPGRADE_FILE_RANGE_2 goto WRITE_LOOP_DONE
#flash erase isec
#flash write $iaddr_dst $iaddr_src $FLASH_SECSIZE
if $isec lt $UPGRADE_FILE_RANGE_0 goto WRITE_LOOP_SKIP_WRITE_OPERATION
spif berase $iaddr_dst $FLASH_SECSIZE_K
if $isec ge $UPGRADE_FILE_RANGE_1 goto WRITE_LOOP_SKIP_WRITE_OPERATION
gosub WriteAndVerifySpif
# WRITE_LOOP_SKIP_WRITE_OPERATION:
set -i isec
set -i -x iaddr_dst $FLASH_SECSIZE
set -i -x iaddr_src $FLASH_SECSIZE
echo .\c
goto WRITE_LOOP
# WRITE_LOOP_DONE:

echo
set -d UPGRADE_FILE_RANGE_1
set -d UPGRADE_FILE_RANGE_2
set -i UPGRADE_FILE_RANGE_0 $UPGRADE_START_SEC
set -i UPGRADE_FILE_RANGE_1 $UPGRADE_START_SEC
set -i UPGRADE_FILE_RANGE_2 $UPGRADE_START_SEC
echo $UPGRADE_FILE_RANGE_0..$UPGRADE_FILE_RANGE_2 "flash sectors erased Ok"
echo $UPGRADE_FILE_RANGE_0..$UPGRADE_FILE_RANGE_1 "flash sectors written Ok"
return


##########################################################################
# Subroutine: TftpBytes2Sectors
# Calculate $TFTPGET_NSEC = ROUND_CEIL($TFTPGET / FLASH_SECSIZE)
# TftpBytes2Sectors:
set TFTPGET_NSEC 0
set TFTPGET_TMP  0
# loop_start:
if $TFTPGET_TMP ge $TFTPGET return
set -i TFTPGET_NSEC
set -i TFTPGET_TMP $FLASH_SECSIZE
goto loop_start


##########################################################################
# Subroutine: WriteAndVerifySpif
# Call "spif write  $iaddr_dst $iaddr_src $FLASH_SECSIZE" 
# and verify that the write succeeded
# WriteAndVerifySpif:
spif write  $iaddr_dst $iaddr_src $FLASH_SECSIZE
spif read   $iaddr_dst $MEM_CB_RX $FLASH_SECSIZE
-cm -v -4 $iaddr_src $MEM_CB_RX $FLASH_SECSIZE
if $CMDSTAT seq PASS return
echo Trying 'spif write $iaddr_dst $iaddr_src' once more
goto WriteAndVerifySpif


